cmake_minimum_required(VERSION 3.17) // Set the version of CMake

project( // provides metadata for the project and prepares it for building C++ code.
    Greeter   // Declared a project named Greeter and specifies that the project is implemented using C++
    VERSION 1.0.0
    DESCRIPTION
        "A simple C++ project to demonstrate creating executables and libraries in CMake" 
    LANGUAGES CXX 
)

set(CMAKE_EXPORT_COMPILE_COMMANDS True) // generates a compile_commands.json file containing all the compiler options for tools like Clang-Tidy(an open-source tool that checks C/C++/Objective-C code for: style violations, programming errors)

# set the postfix "d" for the resulting .so or .dll files when building the
# library in debug mode
set(CMAKE_DEBUG_POSTFIX // appends d to the name of libraries built in debug mode 
    d
)

# add the library target and create an alias
add_library(Greeter)  // creates a target named Greeter to build a library 
add_library(Greeter::Greeter ALIAS Greeter) // creates an alias for Greeter library 

# set properties for the target. VERSION set the library version to the project
# version * SOVERSION set the compatibility  version for the library to the
# major number of the version
set_target_properties(
    Greeter
    PROPERTIES VERSION ${PROJECT_VERSION} // sets vwersion of library to project's version 
               SOVERSION ${PROJECT_VERSION_MAJOR} // sets the API compatibility version to major version 1
)

# add sources to the library target
target_sources(
    Greeter
    PRIVATE src/hello.cpp src/internal.cpp // tells CMake which files to compile into the library 
)

# define the C++ standard needed to compile this library and make it visible to
# dependers
target_compile_features(
    Greeter
    PUBLIC cxx_std_17
)

# set the include directories
target_include_directories(
    Greeter 
    PRIVATE src // only the library itself needs access to SRC folder 
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include> // during the build include headers from /include 
    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}> // after installation, headers will be in the standard include directory.
)

# if using limited visibility, set CXX_VISIBILILTY_PRESET to "hidden"
include(GenerateExportHeader) // creates a header file to handle platform specific export/import symbols 
set_property(
    TARGET Greeter // hides all non exported symbols by default hidden 
    PROPERTY CXX_VISIBILITY_PRESET "hidden"
)
# Hide inlined functions by default, reducing the size of the library
set_property( // Improves performance and security by exposing only necessary symbols.
    TARGET Greeter
    PROPERTY VISIBILITY_INLINES_HIDDEN TRUE
)
# this command generates a header file in the CMAKE_CURRENT_BINARY_DIR which
# sets the visibility attributes according to the compiler settings
generate_export_header(
    Greeter
    EXPORT_FILE_NAME
    export/greeter/export_greeter.hpp
)
# Add CMAKE_CURRENT_BINARY_DIR to the include path so the generated header can
# be found
target_include_directories(
    Greeter
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/export>
    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
    
)

# include the GNUInstallDirs module to get the canonical install paths defined
include(GNUInstallDirs)

# Install the library and export the CMake targets
install(
    TARGETS Greeter
    EXPORT GreeterTargets
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} // sets up installation paths for the library 
)
# install the public headers
install(DIRECTORY include/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}) // install the public header files from include/

# install the generated export header
install(
    FILES "${CMAKE_CURRENT_BINARY_DIR}/export/greeter/export_greeter.hpp" 
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/greeter
)

# configure the CMake package file so the libray can be included with find_package() later
include(CMakePackageConfigHelpers)

write_basic_package_version_file(
    "GreeterConfigVersion.cmake"
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY SameMajorVersion)

configure_package_config_file(
    "${CMAKE_CURRENT_LIST_DIR}/cmake/GreeterConfig.cmake.in"
    "${CMAKE_CURRENT_BINARY_DIR}/GreeterConfig.cmake"
    INSTALL_DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/cmake/greeter
)

# install the CMake targets
install(
    EXPORT GreeterTargets
    FILE GreeterTargets.cmake
    NAMESPACE Greeter::
    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/cmake/greeter
    }
